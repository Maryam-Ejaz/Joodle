"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pocketbase";
exports.ids = ["vendor-chunks/pocketbase"];
exports.modules = {

/***/ "(rsc)/./node_modules/pocketbase/dist/pocketbase.es.mjs":
/*!********************************************************!*\
  !*** ./node_modules/pocketbase/dist/pocketbase.es.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: () => (/* binding */ AdminService),\n/* harmony export */   AsyncAuthStore: () => (/* binding */ AsyncAuthStore),\n/* harmony export */   BaseAuthStore: () => (/* binding */ BaseAuthStore),\n/* harmony export */   ClientResponseError: () => (/* binding */ ClientResponseError),\n/* harmony export */   CollectionService: () => (/* binding */ CollectionService),\n/* harmony export */   CrudService: () => (/* binding */ CrudService),\n/* harmony export */   HealthService: () => (/* binding */ HealthService),\n/* harmony export */   LocalAuthStore: () => (/* binding */ LocalAuthStore),\n/* harmony export */   LogService: () => (/* binding */ LogService),\n/* harmony export */   RealtimeService: () => (/* binding */ RealtimeService),\n/* harmony export */   RecordService: () => (/* binding */ RecordService),\n/* harmony export */   cookieParse: () => (/* binding */ cookieParse),\n/* harmony export */   cookieSerialize: () => (/* binding */ cookieSerialize),\n/* harmony export */   \"default\": () => (/* binding */ Client),\n/* harmony export */   getTokenPayload: () => (/* binding */ getTokenPayload),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   normalizeUnknownQueryParams: () => (/* binding */ normalizeUnknownQueryParams)\n/* harmony export */ });\nclass ClientResponseError extends Error {\n    constructor(e){\n        super(\"ClientResponseError\"), this.url = \"\", this.status = 0, this.response = {}, this.isAbort = !1, this.originalError = null, Object.setPrototypeOf(this, ClientResponseError.prototype), null !== e && \"object\" == typeof e && (this.url = \"string\" == typeof e.url ? e.url : \"\", this.status = \"number\" == typeof e.status ? e.status : 0, this.isAbort = !!e.isAbort, this.originalError = e.originalError, null !== e.response && \"object\" == typeof e.response ? this.response = e.response : null !== e.data && \"object\" == typeof e.data ? this.response = e.data : this.response = {}), this.originalError || e instanceof ClientResponseError || (this.originalError = e), \"undefined\" != typeof DOMException && e instanceof DOMException && (this.isAbort = !0), this.name = \"ClientResponseError \" + this.status, this.message = this.response?.message, this.message || (this.isAbort ? this.message = \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\" : this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\") ? this.message = \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\" : this.message = \"Something went wrong while processing your request.\");\n    }\n    get data() {\n        return this.response;\n    }\n    toJSON() {\n        return {\n            ...this\n        };\n    }\n}\nconst e = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nfunction cookieParse(e, t) {\n    const s = {};\n    if (\"string\" != typeof e) return s;\n    const i = Object.assign({}, t || {}).decode || defaultDecode;\n    let n = 0;\n    for(; n < e.length;){\n        const t = e.indexOf(\"=\", n);\n        if (-1 === t) break;\n        let r = e.indexOf(\";\", n);\n        if (-1 === r) r = e.length;\n        else if (r < t) {\n            n = e.lastIndexOf(\";\", t - 1) + 1;\n            continue;\n        }\n        const o = e.slice(n, t).trim();\n        if (void 0 === s[o]) {\n            let n = e.slice(t + 1, r).trim();\n            34 === n.charCodeAt(0) && (n = n.slice(1, -1));\n            try {\n                s[o] = i(n);\n            } catch (e) {\n                s[o] = n;\n            }\n        }\n        n = r + 1;\n    }\n    return s;\n}\nfunction cookieSerialize(t, s, i) {\n    const n = Object.assign({}, i || {}), r = n.encode || defaultEncode;\n    if (!e.test(t)) throw new TypeError(\"argument name is invalid\");\n    const o = r(s);\n    if (o && !e.test(o)) throw new TypeError(\"argument val is invalid\");\n    let a = t + \"=\" + o;\n    if (null != n.maxAge) {\n        const e = n.maxAge - 0;\n        if (isNaN(e) || !isFinite(e)) throw new TypeError(\"option maxAge is invalid\");\n        a += \"; Max-Age=\" + Math.floor(e);\n    }\n    if (n.domain) {\n        if (!e.test(n.domain)) throw new TypeError(\"option domain is invalid\");\n        a += \"; Domain=\" + n.domain;\n    }\n    if (n.path) {\n        if (!e.test(n.path)) throw new TypeError(\"option path is invalid\");\n        a += \"; Path=\" + n.path;\n    }\n    if (n.expires) {\n        if (!function isDate(e) {\n            return \"[object Date]\" === Object.prototype.toString.call(e) || e instanceof Date;\n        }(n.expires) || isNaN(n.expires.valueOf())) throw new TypeError(\"option expires is invalid\");\n        a += \"; Expires=\" + n.expires.toUTCString();\n    }\n    if (n.httpOnly && (a += \"; HttpOnly\"), n.secure && (a += \"; Secure\"), n.priority) {\n        switch(\"string\" == typeof n.priority ? n.priority.toLowerCase() : n.priority){\n            case \"low\":\n                a += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                a += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                a += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n    if (n.sameSite) {\n        switch(\"string\" == typeof n.sameSite ? n.sameSite.toLowerCase() : n.sameSite){\n            case !0:\n                a += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                a += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                a += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                a += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n    return a;\n}\nfunction defaultDecode(e) {\n    return -1 !== e.indexOf(\"%\") ? decodeURIComponent(e) : e;\n}\nfunction defaultEncode(e) {\n    return encodeURIComponent(e);\n}\nconst t = \"undefined\" != typeof navigator && \"ReactNative\" === navigator.product || \"undefined\" != typeof global && global.HermesInternal;\nlet s;\nfunction getTokenPayload(e) {\n    if (e) try {\n        const t = decodeURIComponent(s(e.split(\".\")[1]).split(\"\").map(function(e) {\n            return \"%\" + (\"00\" + e.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return JSON.parse(t) || {};\n    } catch (e) {}\n    return {};\n}\nfunction isTokenExpired(e, t = 0) {\n    let s = getTokenPayload(e);\n    return !(Object.keys(s).length > 0 && (!s.exp || s.exp - t > Date.now() / 1e3));\n}\ns = \"function\" != typeof atob || t ? (e)=>{\n    let t = String(e).replace(/=+$/, \"\");\n    if (t.length % 4 == 1) throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    for(var s, i, n = 0, r = 0, o = \"\"; i = t.charAt(r++); ~i && (s = n % 4 ? 64 * s + i : i, n++ % 4) ? o += String.fromCharCode(255 & s >> (-2 * n & 6)) : 0)i = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(i);\n    return o;\n} : atob;\nconst i = \"pb_auth\";\nclass BaseAuthStore {\n    constructor(){\n        this.baseToken = \"\", this.baseModel = null, this._onChangeCallbacks = [];\n    }\n    get token() {\n        return this.baseToken;\n    }\n    get model() {\n        return this.baseModel;\n    }\n    get isValid() {\n        return !isTokenExpired(this.token);\n    }\n    get isAdmin() {\n        return \"admin\" === getTokenPayload(this.token).type;\n    }\n    get isAuthRecord() {\n        return \"authRecord\" === getTokenPayload(this.token).type;\n    }\n    save(e, t) {\n        this.baseToken = e || \"\", this.baseModel = t || null, this.triggerChange();\n    }\n    clear() {\n        this.baseToken = \"\", this.baseModel = null, this.triggerChange();\n    }\n    loadFromCookie(e, t = i) {\n        const s = cookieParse(e || \"\")[t] || \"\";\n        let n = {};\n        try {\n            n = JSON.parse(s), (null === typeof n || \"object\" != typeof n || Array.isArray(n)) && (n = {});\n        } catch (e) {}\n        this.save(n.token || \"\", n.model || null);\n    }\n    exportToCookie(e, t = i) {\n        const s = {\n            secure: !0,\n            sameSite: !0,\n            httpOnly: !0,\n            path: \"/\"\n        }, n = getTokenPayload(this.token);\n        s.expires = n?.exp ? new Date(1e3 * n.exp) : new Date(\"1970-01-01\"), e = Object.assign({}, s, e);\n        const r = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null\n        };\n        let o = cookieSerialize(t, JSON.stringify(r), e);\n        const a = \"undefined\" != typeof Blob ? new Blob([\n            o\n        ]).size : o.length;\n        if (r.model && a > 4096) {\n            r.model = {\n                id: r?.model?.id,\n                email: r?.model?.email\n            };\n            const s = [\n                \"collectionId\",\n                \"username\",\n                \"verified\"\n            ];\n            for(const e in this.model)s.includes(e) && (r.model[e] = this.model[e]);\n            o = cookieSerialize(t, JSON.stringify(r), e);\n        }\n        return o;\n    }\n    onChange(e, t = !1) {\n        return this._onChangeCallbacks.push(e), t && e(this.token, this.model), ()=>{\n            for(let t = this._onChangeCallbacks.length - 1; t >= 0; t--)if (this._onChangeCallbacks[t] == e) return delete this._onChangeCallbacks[t], void this._onChangeCallbacks.splice(t, 1);\n        };\n    }\n    triggerChange() {\n        for (const e of this._onChangeCallbacks)e && e(this.token, this.model);\n    }\n}\nclass LocalAuthStore extends BaseAuthStore {\n    constructor(e = \"pocketbase_auth\"){\n        super(), this.storageFallback = {}, this.storageKey = e, this._bindStorageEvent();\n    }\n    get token() {\n        return (this._storageGet(this.storageKey) || {}).token || \"\";\n    }\n    get model() {\n        return (this._storageGet(this.storageKey) || {}).model || null;\n    }\n    save(e, t) {\n        this._storageSet(this.storageKey, {\n            token: e,\n            model: t\n        }), super.save(e, t);\n    }\n    clear() {\n        this._storageRemove(this.storageKey), super.clear();\n    }\n    _storageGet(e) {\n        if (false) {}\n        return this.storageFallback[e];\n    }\n    _storageSet(e, t) {\n        if (false) {} else this.storageFallback[e] = t;\n    }\n    _storageRemove(e) {\n         false && 0, delete this.storageFallback[e];\n    }\n    _bindStorageEvent() {\n         false && 0;\n    }\n}\nclass BaseService {\n    constructor(e){\n        this.client = e;\n    }\n}\nclass SettingsService extends BaseService {\n    async getAll(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/settings\", e);\n    }\n    async update(e, t) {\n        return t = Object.assign({\n            method: \"PATCH\",\n            body: e\n        }, t), this.client.send(\"/api/settings\", t);\n    }\n    async testS3(e = \"storage\", t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: {\n                filesystem: e\n            }\n        }, t), this.client.send(\"/api/settings/test/s3\", t).then(()=>!0);\n    }\n    async testEmail(e, t, s) {\n        return s = Object.assign({\n            method: \"POST\",\n            body: {\n                email: e,\n                template: t\n            }\n        }, s), this.client.send(\"/api/settings/test/email\", s).then(()=>!0);\n    }\n    async generateAppleClientSecret(e, t, s, i, n, r) {\n        return r = Object.assign({\n            method: \"POST\",\n            body: {\n                clientId: e,\n                teamId: t,\n                keyId: s,\n                privateKey: i,\n                duration: n\n            }\n        }, r), this.client.send(\"/api/settings/apple/generate-client-secret\", r);\n    }\n}\nclass CrudService extends BaseService {\n    decode(e) {\n        return e;\n    }\n    async getFullList(e, t) {\n        if (\"number\" == typeof e) return this._getFullList(e, t);\n        let s = 500;\n        return (t = Object.assign({}, e, t)).batch && (s = t.batch, delete t.batch), this._getFullList(s, t);\n    }\n    async getList(e = 1, t = 30, s) {\n        return (s = Object.assign({\n            method: \"GET\"\n        }, s)).query = Object.assign({\n            page: e,\n            perPage: t\n        }, s.query), this.client.send(this.baseCrudPath, s).then((e)=>(e.items = e.items?.map((e)=>this.decode(e)) || [], e));\n    }\n    async getFirstListItem(e, t) {\n        return (t = Object.assign({\n            requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + e\n        }, t)).query = Object.assign({\n            filter: e,\n            skipTotal: 1\n        }, t.query), this.getList(1, 1, t).then((e)=>{\n            if (!e?.items?.length) throw new ClientResponseError({\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"The requested resource wasn't found.\",\n                    data: {}\n                }\n            });\n            return e.items[0];\n        });\n    }\n    async getOne(e, t) {\n        if (!e) throw new ClientResponseError({\n            url: this.client.buildUrl(this.baseCrudPath + \"/\"),\n            status: 404,\n            response: {\n                code: 404,\n                message: \"Missing required record id.\",\n                data: {}\n            }\n        });\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), t).then((e)=>this.decode(e));\n    }\n    async create(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: e\n        }, t), this.client.send(this.baseCrudPath, t).then((e)=>this.decode(e));\n    }\n    async update(e, t, s) {\n        return s = Object.assign({\n            method: \"PATCH\",\n            body: t\n        }, s), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), s).then((e)=>this.decode(e));\n    }\n    async delete(e, t) {\n        return t = Object.assign({\n            method: \"DELETE\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e), t).then(()=>!0);\n    }\n    _getFullList(e = 500, t) {\n        (t = t || {}).query = Object.assign({\n            skipTotal: 1\n        }, t.query);\n        let s = [], request = async (i)=>this.getList(i, e || 500, t).then((e)=>{\n                const t = e.items;\n                return s = s.concat(t), t.length == e.perPage ? request(i + 1) : s;\n            });\n        return request(1);\n    }\n}\nfunction normalizeLegacyOptionsArgs(e, t, s, i) {\n    const n = void 0 !== i;\n    return n || void 0 !== s ? n ? (console.warn(e), t.body = Object.assign({}, t.body, s), t.query = Object.assign({}, t.query, i), t) : Object.assign(t, s) : t;\n}\nfunction resetAutoRefresh(e) {\n    e._resetAutoRefresh?.();\n}\nclass AdminService extends CrudService {\n    get baseCrudPath() {\n        return \"/api/admins\";\n    }\n    async update(e, t, s) {\n        return super.update(e, t, s).then((e)=>(this.client.authStore.model?.id === e.id && void 0 === this.client.authStore.model?.collectionId && this.client.authStore.save(this.client.authStore.token, e), e));\n    }\n    async delete(e, t) {\n        return super.delete(e, t).then((t)=>(t && this.client.authStore.model?.id === e && void 0 === this.client.authStore.model?.collectionId && this.client.authStore.clear(), t));\n    }\n    authResponse(e) {\n        const t = this.decode(e?.admin || {});\n        return e?.token && e?.admin && this.client.authStore.save(e.token, t), Object.assign({}, e, {\n            token: e?.token || \"\",\n            admin: t\n        });\n    }\n    async authWithPassword(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                identity: e,\n                password: t\n            }\n        };\n        n = normalizeLegacyOptionsArgs(\"This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).\", n, s, i);\n        const r = n.autoRefreshThreshold;\n        delete n.autoRefreshThreshold, n.autoRefresh || resetAutoRefresh(this.client);\n        let o = await this.client.send(this.baseCrudPath + \"/auth-with-password\", n);\n        return o = this.authResponse(o), r && function registerAutoRefresh(e, t, s, i) {\n            resetAutoRefresh(e);\n            const n = e.beforeSend, r = e.authStore.model, o = e.authStore.onChange((t, s)=>{\n                (!t || s?.id != r?.id || (s?.collectionId || r?.collectionId) && s?.collectionId != r?.collectionId) && resetAutoRefresh(e);\n            });\n            e._resetAutoRefresh = function() {\n                o(), e.beforeSend = n, delete e._resetAutoRefresh;\n            }, e.beforeSend = async (r, o)=>{\n                const a = e.authStore.token;\n                if (o.query?.autoRefresh) return n ? n(r, o) : {\n                    url: r,\n                    sendOptions: o\n                };\n                let c = e.authStore.isValid;\n                if (c && isTokenExpired(e.authStore.token, t)) try {\n                    await s();\n                } catch (e) {\n                    c = !1;\n                }\n                c || await i();\n                const l = o.headers || {};\n                for(let t in l)if (\"authorization\" == t.toLowerCase() && a == l[t] && e.authStore.token) {\n                    l[t] = e.authStore.token;\n                    break;\n                }\n                return o.headers = l, n ? n(r, o) : {\n                    url: r,\n                    sendOptions: o\n                };\n            };\n        }(this.client, r, ()=>this.authRefresh({\n                autoRefresh: !0\n            }), ()=>this.authWithPassword(e, t, Object.assign({\n                autoRefresh: !0\n            }, n))), o;\n    }\n    async authRefresh(e, t) {\n        let s = {\n            method: \"POST\"\n        };\n        return s = normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\", s, e, t), this.client.send(this.baseCrudPath + \"/auth-refresh\", s).then(this.authResponse.bind(this));\n    }\n    async requestPasswordReset(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\", i, t, s), this.client.send(this.baseCrudPath + \"/request-password-reset\", i).then(()=>!0);\n    }\n    async confirmPasswordReset(e, t, s, i, n) {\n        let r = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t,\n                passwordConfirm: s\n            }\n        };\n        return r = normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).\", r, i, n), this.client.send(this.baseCrudPath + \"/confirm-password-reset\", r).then(()=>!0);\n    }\n}\nconst n = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\"\n];\nfunction normalizeUnknownQueryParams(e) {\n    if (e) {\n        e.query = e.query || {};\n        for(let t in e)n.includes(t) || (e.query[t] = e[t], delete e[t]);\n    }\n}\nclass RealtimeService extends BaseService {\n    constructor(){\n        super(...arguments), this.clientId = \"\", this.eventSource = null, this.subscriptions = {}, this.lastSentSubscriptions = [], this.maxConnectTimeout = 15e3, this.reconnectAttempts = 0, this.maxReconnectAttempts = 1 / 0, this.predefinedReconnectIntervals = [\n            200,\n            300,\n            500,\n            1e3,\n            1200,\n            1500,\n            2e3\n        ], this.pendingConnects = [];\n    }\n    get isConnected() {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n    async subscribe(e, t, s) {\n        if (!e) throw new Error(\"topic must be set.\");\n        let i = e;\n        if (s) {\n            normalizeUnknownQueryParams(s = Object.assign({}, s));\n            const e = \"options=\" + encodeURIComponent(JSON.stringify({\n                query: s.query,\n                headers: s.headers\n            }));\n            i += (i.includes(\"?\") ? \"&\" : \"?\") + e;\n        }\n        const listener = function(e) {\n            const s = e;\n            let i;\n            try {\n                i = JSON.parse(s?.data);\n            } catch  {}\n            t(i || {});\n        };\n        return this.subscriptions[i] || (this.subscriptions[i] = []), this.subscriptions[i].push(listener), this.isConnected ? 1 === this.subscriptions[i].length ? await this.submitSubscriptions() : this.eventSource?.addEventListener(i, listener) : await this.connect(), async ()=>this.unsubscribeByTopicAndListener(e, listener);\n    }\n    async unsubscribe(e) {\n        let t = !1;\n        if (e) {\n            const s = this.getSubscriptionsByTopic(e);\n            for(let e in s)if (this.hasSubscriptionListeners(e)) {\n                for (let t of this.subscriptions[e])this.eventSource?.removeEventListener(e, t);\n                delete this.subscriptions[e], t || (t = !0);\n            }\n        } else this.subscriptions = {};\n        this.hasSubscriptionListeners() ? t && await this.submitSubscriptions() : this.disconnect();\n    }\n    async unsubscribeByPrefix(e) {\n        let t = !1;\n        for(let s in this.subscriptions)if ((s + \"?\").startsWith(e)) {\n            t = !0;\n            for (let e of this.subscriptions[s])this.eventSource?.removeEventListener(s, e);\n            delete this.subscriptions[s];\n        }\n        t && (this.hasSubscriptionListeners() ? await this.submitSubscriptions() : this.disconnect());\n    }\n    async unsubscribeByTopicAndListener(e, t) {\n        let s = !1;\n        const i = this.getSubscriptionsByTopic(e);\n        for(let e in i){\n            if (!Array.isArray(this.subscriptions[e]) || !this.subscriptions[e].length) continue;\n            let i = !1;\n            for(let s = this.subscriptions[e].length - 1; s >= 0; s--)this.subscriptions[e][s] === t && (i = !0, delete this.subscriptions[e][s], this.subscriptions[e].splice(s, 1), this.eventSource?.removeEventListener(e, t));\n            i && (this.subscriptions[e].length || delete this.subscriptions[e], s || this.hasSubscriptionListeners(e) || (s = !0));\n        }\n        this.hasSubscriptionListeners() ? s && await this.submitSubscriptions() : this.disconnect();\n    }\n    hasSubscriptionListeners(e) {\n        if (this.subscriptions = this.subscriptions || {}, e) return !!this.subscriptions[e]?.length;\n        for(let e in this.subscriptions)if (this.subscriptions[e]?.length) return !0;\n        return !1;\n    }\n    async submitSubscriptions() {\n        if (this.clientId) return this.addAllSubscriptionListeners(), this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys(), this.client.send(\"/api/realtime\", {\n            method: \"POST\",\n            body: {\n                clientId: this.clientId,\n                subscriptions: this.lastSentSubscriptions\n            },\n            requestKey: this.getSubscriptionsCancelKey()\n        }).catch((e)=>{\n            if (!e?.isAbort) throw e;\n        });\n    }\n    getSubscriptionsCancelKey() {\n        return \"realtime_\" + this.clientId;\n    }\n    getSubscriptionsByTopic(e) {\n        const t = {};\n        e = e.includes(\"?\") ? e : e + \"?\";\n        for(let s in this.subscriptions)(s + \"?\").startsWith(e) && (t[s] = this.subscriptions[s]);\n        return t;\n    }\n    getNonEmptySubscriptionKeys() {\n        const e = [];\n        for(let t in this.subscriptions)this.subscriptions[t].length && e.push(t);\n        return e;\n    }\n    addAllSubscriptionListeners() {\n        if (this.eventSource) {\n            this.removeAllSubscriptionListeners();\n            for(let e in this.subscriptions)for (let t of this.subscriptions[e])this.eventSource.addEventListener(e, t);\n        }\n    }\n    removeAllSubscriptionListeners() {\n        if (this.eventSource) for(let e in this.subscriptions)for (let t of this.subscriptions[e])this.eventSource.removeEventListener(e, t);\n    }\n    async connect() {\n        if (!(this.reconnectAttempts > 0)) return new Promise((e, t)=>{\n            this.pendingConnects.push({\n                resolve: e,\n                reject: t\n            }), this.pendingConnects.length > 1 || this.initConnect();\n        });\n    }\n    initConnect() {\n        this.disconnect(!0), clearTimeout(this.connectTimeoutId), this.connectTimeoutId = setTimeout(()=>{\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout), this.eventSource = new EventSource(this.client.buildUrl(\"/api/realtime\")), this.eventSource.onerror = (e)=>{\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        }, this.eventSource.addEventListener(\"PB_CONNECT\", (e)=>{\n            const t = e;\n            this.clientId = t?.lastEventId, this.submitSubscriptions().then(async ()=>{\n                let e = 3;\n                for(; this.hasUnsentSubscriptions() && e > 0;)e--, await this.submitSubscriptions();\n            }).then(()=>{\n                for (let e of this.pendingConnects)e.resolve();\n                this.pendingConnects = [], this.reconnectAttempts = 0, clearTimeout(this.reconnectTimeoutId), clearTimeout(this.connectTimeoutId);\n                const t = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                for(let s in t)for (let i of t[s])i(e);\n            }).catch((e)=>{\n                this.clientId = \"\", this.connectErrorHandler(e);\n            });\n        });\n    }\n    hasUnsentSubscriptions() {\n        const e = this.getNonEmptySubscriptionKeys();\n        if (e.length != this.lastSentSubscriptions.length) return !0;\n        for (const t of e)if (!this.lastSentSubscriptions.includes(t)) return !0;\n        return !1;\n    }\n    connectErrorHandler(e) {\n        if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), !this.clientId && !this.reconnectAttempts || this.reconnectAttempts > this.maxReconnectAttempts) {\n            for (let t of this.pendingConnects)t.reject(new ClientResponseError(e));\n            return this.pendingConnects = [], void this.disconnect();\n        }\n        this.disconnect(!0);\n        const t = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++, this.reconnectTimeoutId = setTimeout(()=>{\n            this.initConnect();\n        }, t);\n    }\n    disconnect(e = !1) {\n        if (clearTimeout(this.connectTimeoutId), clearTimeout(this.reconnectTimeoutId), this.removeAllSubscriptionListeners(), this.client.cancelRequest(this.getSubscriptionsCancelKey()), this.eventSource?.close(), this.eventSource = null, this.clientId = \"\", !e) {\n            this.reconnectAttempts = 0;\n            for (let e of this.pendingConnects)e.resolve();\n            this.pendingConnects = [];\n        }\n    }\n}\nclass RecordService extends CrudService {\n    constructor(e, t){\n        super(e), this.collectionIdOrName = t;\n    }\n    get baseCrudPath() {\n        return this.baseCollectionPath + \"/records\";\n    }\n    get baseCollectionPath() {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n    async subscribe(e, t, s) {\n        if (!e) throw new Error(\"Missing topic.\");\n        if (!t) throw new Error(\"Missing subscription callback.\");\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + e, t, s);\n    }\n    async unsubscribe(e) {\n        return e ? this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + e) : this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n    async getFullList(e, t) {\n        if (\"number\" == typeof e) return super.getFullList(e, t);\n        const s = Object.assign({}, e, t);\n        return super.getFullList(s);\n    }\n    async getList(e = 1, t = 30, s) {\n        return super.getList(e, t, s);\n    }\n    async getFirstListItem(e, t) {\n        return super.getFirstListItem(e, t);\n    }\n    async getOne(e, t) {\n        return super.getOne(e, t);\n    }\n    async create(e, t) {\n        return super.create(e, t);\n    }\n    async update(e, t, s) {\n        return super.update(e, t, s).then((e)=>(this.client.authStore.model?.id !== e?.id || this.client.authStore.model?.collectionId !== this.collectionIdOrName && this.client.authStore.model?.collectionName !== this.collectionIdOrName || this.client.authStore.save(this.client.authStore.token, e), e));\n    }\n    async delete(e, t) {\n        return super.delete(e, t).then((t)=>(!t || this.client.authStore.model?.id !== e || this.client.authStore.model?.collectionId !== this.collectionIdOrName && this.client.authStore.model?.collectionName !== this.collectionIdOrName || this.client.authStore.clear(), t));\n    }\n    authResponse(e) {\n        const t = this.decode(e?.record || {});\n        return this.client.authStore.save(e?.token, t), Object.assign({}, e, {\n            token: e?.token || \"\",\n            record: t\n        });\n    }\n    async listAuthMethods(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(this.baseCollectionPath + \"/auth-methods\", e).then((e)=>Object.assign({}, e, {\n                usernamePassword: !!e?.usernamePassword,\n                emailPassword: !!e?.emailPassword,\n                authProviders: Array.isArray(e?.authProviders) ? e?.authProviders : []\n            }));\n    }\n    async authWithPassword(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                identity: e,\n                password: t\n            }\n        };\n        return n = normalizeLegacyOptionsArgs(\"This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).\", n, s, i), this.client.send(this.baseCollectionPath + \"/auth-with-password\", n).then((e)=>this.authResponse(e));\n    }\n    async authWithOAuth2Code(e, t, s, i, n, r, o) {\n        let a = {\n            method: \"POST\",\n            body: {\n                provider: e,\n                code: t,\n                codeVerifier: s,\n                redirectUrl: i,\n                createData: n\n            }\n        };\n        return a = normalizeLegacyOptionsArgs(\"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\", a, r, o), this.client.send(this.baseCollectionPath + \"/auth-with-oauth2\", a).then((e)=>this.authResponse(e));\n    }\n    authWithOAuth2(...e) {\n        if (e.length > 1 || \"string\" == typeof e?.[0]) return console.warn(\"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\"), this.authWithOAuth2Code(e?.[0] || \"\", e?.[1] || \"\", e?.[2] || \"\", e?.[3] || \"\", e?.[4] || {}, e?.[5] || {}, e?.[6] || {});\n        const t = e?.[0] || {};\n        let s = null;\n        t.urlCallback || (s = openBrowserPopup(void 0));\n        const i = new RealtimeService(this.client);\n        function cleanup() {\n            s?.close(), i.unsubscribe();\n        }\n        const n = {}, r = t.requestKey;\n        return r && (n.requestKey = r), this.listAuthMethods(n).then((e)=>{\n            const n = e.authProviders.find((e)=>e.name === t.provider);\n            if (!n) throw new ClientResponseError(new Error(`Missing or invalid provider \"${t.provider}\".`));\n            const o = this.client.buildUrl(\"/api/oauth2-redirect\"), a = r ? this.client.cancelControllers?.[r] : void 0;\n            return a && (a.signal.onabort = ()=>{\n                cleanup();\n            }), new Promise(async (e, r)=>{\n                try {\n                    await i.subscribe(\"@oauth2\", async (s)=>{\n                        const c = i.clientId;\n                        try {\n                            if (!s.state || c !== s.state) throw new Error(\"State parameters don't match.\");\n                            if (s.error || !s.code) throw new Error(\"OAuth2 redirect error or missing code: \" + s.error);\n                            const i = Object.assign({}, t);\n                            delete i.provider, delete i.scopes, delete i.createData, delete i.urlCallback, a?.signal?.onabort && (a.signal.onabort = null);\n                            const r = await this.authWithOAuth2Code(n.name, s.code, n.codeVerifier, o, t.createData, i);\n                            e(r);\n                        } catch (e) {\n                            r(new ClientResponseError(e));\n                        }\n                        cleanup();\n                    });\n                    const c = {\n                        state: i.clientId\n                    };\n                    t.scopes?.length && (c.scope = t.scopes.join(\" \"));\n                    const l = this._replaceQueryParams(n.authUrl + o, c);\n                    let h = t.urlCallback || function(e) {\n                        s ? s.location.href = e : s = openBrowserPopup(e);\n                    };\n                    await h(l);\n                } catch (e) {\n                    cleanup(), r(new ClientResponseError(e));\n                }\n            });\n        }).catch((e)=>{\n            throw cleanup(), e;\n        });\n    }\n    async authRefresh(e, t) {\n        let s = {\n            method: \"POST\"\n        };\n        return s = normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\", s, e, t), this.client.send(this.baseCollectionPath + \"/auth-refresh\", s).then((e)=>this.authResponse(e));\n    }\n    async requestPasswordReset(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-password-reset\", i).then(()=>!0);\n    }\n    async confirmPasswordReset(e, t, s, i, n) {\n        let r = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t,\n                passwordConfirm: s\n            }\n        };\n        return r = normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\", r, i, n), this.client.send(this.baseCollectionPath + \"/confirm-password-reset\", r).then(()=>!0);\n    }\n    async requestVerification(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                email: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-verification\", i).then(()=>!0);\n    }\n    async confirmVerification(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                token: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/confirm-verification\", i).then(()=>{\n            const t = getTokenPayload(e), s = this.client.authStore.model;\n            return s && !s.verified && s.id === t.id && s.collectionId === t.collectionId && (s.verified = !0, this.client.authStore.save(this.client.authStore.token, s)), !0;\n        });\n    }\n    async requestEmailChange(e, t, s) {\n        let i = {\n            method: \"POST\",\n            body: {\n                newEmail: e\n            }\n        };\n        return i = normalizeLegacyOptionsArgs(\"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\", i, t, s), this.client.send(this.baseCollectionPath + \"/request-email-change\", i).then(()=>!0);\n    }\n    async confirmEmailChange(e, t, s, i) {\n        let n = {\n            method: \"POST\",\n            body: {\n                token: e,\n                password: t\n            }\n        };\n        return n = normalizeLegacyOptionsArgs(\"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\", n, s, i), this.client.send(this.baseCollectionPath + \"/confirm-email-change\", n).then(()=>{\n            const t = getTokenPayload(e), s = this.client.authStore.model;\n            return s && s.id === t.id && s.collectionId === t.collectionId && this.client.authStore.clear(), !0;\n        });\n    }\n    async listExternalAuths(e, t) {\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e) + \"/external-auths\", t);\n    }\n    async unlinkExternalAuth(e, t, s) {\n        return s = Object.assign({\n            method: \"DELETE\"\n        }, s), this.client.send(this.baseCrudPath + \"/\" + encodeURIComponent(e) + \"/external-auths/\" + encodeURIComponent(t), s).then(()=>!0);\n    }\n    _replaceQueryParams(e, t = {}) {\n        let s = e, i = \"\";\n        e.indexOf(\"?\") >= 0 && (s = e.substring(0, e.indexOf(\"?\")), i = e.substring(e.indexOf(\"?\") + 1));\n        const n = {}, r = i.split(\"&\");\n        for (const e of r){\n            if (\"\" == e) continue;\n            const t = e.split(\"=\");\n            n[decodeURIComponent(t[0].replace(/\\+/g, \" \"))] = decodeURIComponent((t[1] || \"\").replace(/\\+/g, \" \"));\n        }\n        for(let e in t)t.hasOwnProperty(e) && (null == t[e] ? delete n[e] : n[e] = t[e]);\n        i = \"\";\n        for(let e in n)n.hasOwnProperty(e) && (\"\" != i && (i += \"&\"), i += encodeURIComponent(e.replace(/%20/g, \"+\")) + \"=\" + encodeURIComponent(n[e].replace(/%20/g, \"+\")));\n        return \"\" != i ? s + \"?\" + i : s;\n    }\n}\nfunction openBrowserPopup(e) {\n    if (true) throw new ClientResponseError(new Error(\"Not in a browser context - please pass a custom urlCallback function.\"));\n    let t = 1024, s = 768, i = window.innerWidth, n = window.innerHeight;\n    t = t > i ? i : t, s = s > n ? n : s;\n    let r = i / 2 - t / 2, o = n / 2 - s / 2;\n    return window.open(e, \"popup_window\", \"width=\" + t + \",height=\" + s + \",top=\" + o + \",left=\" + r + \",resizable,menubar=no\");\n}\nclass CollectionService extends CrudService {\n    get baseCrudPath() {\n        return \"/api/collections\";\n    }\n    async import(e, t = !1, s) {\n        return s = Object.assign({\n            method: \"PUT\",\n            body: {\n                collections: e,\n                deleteMissing: t\n            }\n        }, s), this.client.send(this.baseCrudPath + \"/import\", s).then(()=>!0);\n    }\n}\nclass LogService extends BaseService {\n    async getList(e = 1, t = 30, s) {\n        return (s = Object.assign({\n            method: \"GET\"\n        }, s)).query = Object.assign({\n            page: e,\n            perPage: t\n        }, s.query), this.client.send(\"/api/logs\", s);\n    }\n    async getOne(e, t) {\n        if (!e) throw new ClientResponseError({\n            url: this.client.buildUrl(\"/api/logs/\"),\n            status: 404,\n            response: {\n                code: 404,\n                message: \"Missing required log id.\",\n                data: {}\n            }\n        });\n        return t = Object.assign({\n            method: \"GET\"\n        }, t), this.client.send(\"/api/logs/\" + encodeURIComponent(e), t);\n    }\n    async getStats(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/logs/stats\", e);\n    }\n}\nclass HealthService extends BaseService {\n    async check(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/health\", e);\n    }\n}\nclass FileService extends BaseService {\n    getUrl(e, t, s = {}) {\n        if (!t || !e?.id || !e?.collectionId && !e?.collectionName) return \"\";\n        const i = [];\n        i.push(\"api\"), i.push(\"files\"), i.push(encodeURIComponent(e.collectionId || e.collectionName)), i.push(encodeURIComponent(e.id)), i.push(encodeURIComponent(t));\n        let n = this.client.buildUrl(i.join(\"/\"));\n        if (Object.keys(s).length) {\n            !1 === s.download && delete s.download;\n            const e = new URLSearchParams(s);\n            n += (n.includes(\"?\") ? \"&\" : \"?\") + e;\n        }\n        return n;\n    }\n    async getToken(e) {\n        return e = Object.assign({\n            method: \"POST\"\n        }, e), this.client.send(\"/api/files/token\", e).then((e)=>e?.token || \"\");\n    }\n}\nclass BackupService extends BaseService {\n    async getFullList(e) {\n        return e = Object.assign({\n            method: \"GET\"\n        }, e), this.client.send(\"/api/backups\", e);\n    }\n    async create(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: {\n                name: e\n            }\n        }, t), this.client.send(\"/api/backups\", t).then(()=>!0);\n    }\n    async upload(e, t) {\n        return t = Object.assign({\n            method: \"POST\",\n            body: e\n        }, t), this.client.send(\"/api/backups/upload\", t).then(()=>!0);\n    }\n    async delete(e, t) {\n        return t = Object.assign({\n            method: \"DELETE\"\n        }, t), this.client.send(`/api/backups/${encodeURIComponent(e)}`, t).then(()=>!0);\n    }\n    async restore(e, t) {\n        return t = Object.assign({\n            method: \"POST\"\n        }, t), this.client.send(`/api/backups/${encodeURIComponent(e)}/restore`, t).then(()=>!0);\n    }\n    getDownloadUrl(e, t) {\n        return this.client.buildUrl(`/api/backups/${encodeURIComponent(t)}?token=${encodeURIComponent(e)}`);\n    }\n}\nclass Client {\n    constructor(e = \"/\", t, s = \"en-US\"){\n        this.cancelControllers = {}, this.recordServices = {}, this.enableAutoCancellation = !0, this.baseUrl = e, this.lang = s, this.authStore = t || new LocalAuthStore, this.admins = new AdminService(this), this.collections = new CollectionService(this), this.files = new FileService(this), this.logs = new LogService(this), this.settings = new SettingsService(this), this.realtime = new RealtimeService(this), this.health = new HealthService(this), this.backups = new BackupService(this);\n    }\n    collection(e) {\n        return this.recordServices[e] || (this.recordServices[e] = new RecordService(this, e)), this.recordServices[e];\n    }\n    autoCancellation(e) {\n        return this.enableAutoCancellation = !!e, this;\n    }\n    cancelRequest(e) {\n        return this.cancelControllers[e] && (this.cancelControllers[e].abort(), delete this.cancelControllers[e]), this;\n    }\n    cancelAllRequests() {\n        for(let e in this.cancelControllers)this.cancelControllers[e].abort();\n        return this.cancelControllers = {}, this;\n    }\n    filter(e, t) {\n        if (!t) return e;\n        for(let s in t){\n            let i = t[s];\n            switch(typeof i){\n                case \"boolean\":\n                case \"number\":\n                    i = \"\" + i;\n                    break;\n                case \"string\":\n                    i = \"'\" + i.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    i = null === i ? \"null\" : i instanceof Date ? \"'\" + i.toISOString().replace(\"T\", \" \") + \"'\" : \"'\" + JSON.stringify(i).replace(/'/g, \"\\\\'\") + \"'\";\n            }\n            e = e.replaceAll(\"{:\" + s + \"}\", i);\n        }\n        return e;\n    }\n    getFileUrl(e, t, s = {}) {\n        return this.files.getUrl(e, t, s);\n    }\n    buildUrl(e) {\n        let t = this.baseUrl;\n        return  true || (0), e && (t += t.endsWith(\"/\") ? \"\" : \"/\", t += e.startsWith(\"/\") ? e.substring(1) : e), t;\n    }\n    async send(e, t) {\n        t = this.initSendOptions(e, t);\n        let s = this.buildUrl(e);\n        if (this.beforeSend) {\n            const e = Object.assign({}, await this.beforeSend(s, t));\n            void 0 !== e.url || void 0 !== e.options ? (s = e.url || s, t = e.options || t) : Object.keys(e).length && (t = e, console?.warn && console.warn(\"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\"));\n        }\n        if (void 0 !== t.query) {\n            const e = this.serializeQueryParams(t.query);\n            e && (s += (s.includes(\"?\") ? \"&\" : \"?\") + e), delete t.query;\n        }\n        \"application/json\" == this.getHeader(t.headers, \"Content-Type\") && t.body && \"string\" != typeof t.body && (t.body = JSON.stringify(t.body));\n        return (t.fetch || fetch)(s, t).then(async (e)=>{\n            let t = {};\n            try {\n                t = await e.json();\n            } catch (e) {}\n            if (this.afterSend && (t = await this.afterSend(e, t)), e.status >= 400) throw new ClientResponseError({\n                url: e.url,\n                status: e.status,\n                data: t\n            });\n            return t;\n        }).catch((e)=>{\n            throw new ClientResponseError(e);\n        });\n    }\n    initSendOptions(e, t) {\n        if ((t = Object.assign({\n            method: \"GET\"\n        }, t)).body = this.convertToFormDataIfNeeded(t.body), normalizeUnknownQueryParams(t), t.query = Object.assign({}, t.params, t.query), void 0 === t.requestKey && (!1 === t.$autoCancel || !1 === t.query.$autoCancel ? t.requestKey = null : (t.$cancelKey || t.query.$cancelKey) && (t.requestKey = t.$cancelKey || t.query.$cancelKey)), delete t.$autoCancel, delete t.query.$autoCancel, delete t.$cancelKey, delete t.query.$cancelKey, null !== this.getHeader(t.headers, \"Content-Type\") || this.isFormData(t.body) || (t.headers = Object.assign({}, t.headers, {\n            \"Content-Type\": \"application/json\"\n        })), null === this.getHeader(t.headers, \"Accept-Language\") && (t.headers = Object.assign({}, t.headers, {\n            \"Accept-Language\": this.lang\n        })), this.authStore.token && null === this.getHeader(t.headers, \"Authorization\") && (t.headers = Object.assign({}, t.headers, {\n            Authorization: this.authStore.token\n        })), this.enableAutoCancellation && null !== t.requestKey) {\n            const s = t.requestKey || (t.method || \"GET\") + e;\n            delete t.requestKey, this.cancelRequest(s);\n            const i = new AbortController;\n            this.cancelControllers[s] = i, t.signal = i.signal;\n        }\n        return t;\n    }\n    convertToFormDataIfNeeded(e) {\n        if (\"undefined\" == typeof FormData || void 0 === e || \"object\" != typeof e || null === e || this.isFormData(e) || !this.hasBlobField(e)) return e;\n        const t = new FormData;\n        for(const s in e){\n            const i = e[s];\n            if (\"object\" != typeof i || this.hasBlobField({\n                data: i\n            })) {\n                const e = Array.isArray(i) ? i : [\n                    i\n                ];\n                for (let i of e)t.append(s, i);\n            } else {\n                let e = {};\n                e[s] = i, t.append(\"@jsonPayload\", JSON.stringify(e));\n            }\n        }\n        return t;\n    }\n    hasBlobField(e) {\n        for(const t in e){\n            const s = Array.isArray(e[t]) ? e[t] : [\n                e[t]\n            ];\n            for (const e of s)if (\"undefined\" != typeof Blob && e instanceof Blob || \"undefined\" != typeof File && e instanceof File) return !0;\n        }\n        return !1;\n    }\n    getHeader(e, t) {\n        e = e || {}, t = t.toLowerCase();\n        for(let s in e)if (s.toLowerCase() == t) return e[s];\n        return null;\n    }\n    isFormData(e) {\n        return e && (\"FormData\" === e.constructor.name || \"undefined\" != typeof FormData && e instanceof FormData);\n    }\n    serializeQueryParams(e) {\n        const t = [];\n        for(const s in e){\n            if (null === e[s]) continue;\n            const i = e[s], n = encodeURIComponent(s);\n            if (Array.isArray(i)) for (const e of i)t.push(n + \"=\" + encodeURIComponent(e));\n            else i instanceof Date ? t.push(n + \"=\" + encodeURIComponent(i.toISOString())) : null !== typeof i && \"object\" == typeof i ? t.push(n + \"=\" + encodeURIComponent(JSON.stringify(i))) : t.push(n + \"=\" + encodeURIComponent(i));\n        }\n        return t.join(\"&\");\n    }\n}\nclass AsyncAuthStore extends BaseAuthStore {\n    constructor(e){\n        super(), this.queue = [], this.saveFunc = e.save, this.clearFunc = e.clear, this._enqueue(()=>this._loadInitial(e.initial));\n    }\n    save(e, t) {\n        super.save(e, t);\n        let s = \"\";\n        try {\n            s = JSON.stringify({\n                token: e,\n                model: t\n            });\n        } catch (e) {\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\n        }\n        this._enqueue(()=>this.saveFunc(s));\n    }\n    clear() {\n        super.clear(), this.clearFunc ? this._enqueue(()=>this.clearFunc()) : this._enqueue(()=>this.saveFunc(\"\"));\n    }\n    async _loadInitial(e) {\n        try {\n            if (e = await e) {\n                let t;\n                \"string\" == typeof e ? t = JSON.parse(e) || {} : \"object\" == typeof e && (t = e), this.save(t.token || \"\", t.model || null);\n            }\n        } catch (e) {}\n    }\n    _enqueue(e) {\n        this.queue.push(e), 1 == this.queue.length && this._dequeue();\n    }\n    _dequeue() {\n        this.queue.length && this.queue[0]().finally(()=>{\n            this.queue.shift(), this.queue.length && this._dequeue();\n        });\n    }\n}\n //# sourceMappingURL=pocketbase.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pocketbase/dist/pocketbase.es.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/pocketbase/dist/pocketbase.es.mjs":
/*!********************************************************!*\
  !*** ./node_modules/pocketbase/dist/pocketbase.es.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminService: () => (/* binding */ AdminService),\n/* harmony export */   AsyncAuthStore: () => (/* binding */ AsyncAuthStore),\n/* harmony export */   BaseAuthStore: () => (/* binding */ BaseAuthStore),\n/* harmony export */   ClientResponseError: () => (/* binding */ ClientResponseError),\n/* harmony export */   CollectionService: () => (/* binding */ CollectionService),\n/* harmony export */   CrudService: () => (/* binding */ CrudService),\n/* harmony export */   HealthService: () => (/* binding */ HealthService),\n/* harmony export */   LocalAuthStore: () => (/* binding */ LocalAuthStore),\n/* harmony export */   LogService: () => (/* binding */ LogService),\n/* harmony export */   RealtimeService: () => (/* binding */ RealtimeService),\n/* harmony export */   RecordService: () => (/* binding */ RecordService),\n/* harmony export */   cookieParse: () => (/* binding */ cookieParse),\n/* harmony export */   cookieSerialize: () => (/* binding */ cookieSerialize),\n/* harmony export */   \"default\": () => (/* binding */ Client),\n/* harmony export */   getTokenPayload: () => (/* binding */ getTokenPayload),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   normalizeUnknownQueryParams: () => (/* binding */ normalizeUnknownQueryParams)\n/* harmony export */ });\nclass ClientResponseError extends Error{constructor(e){super(\"ClientResponseError\"),this.url=\"\",this.status=0,this.response={},this.isAbort=!1,this.originalError=null,Object.setPrototypeOf(this,ClientResponseError.prototype),null!==e&&\"object\"==typeof e&&(this.url=\"string\"==typeof e.url?e.url:\"\",this.status=\"number\"==typeof e.status?e.status:0,this.isAbort=!!e.isAbort,this.originalError=e.originalError,null!==e.response&&\"object\"==typeof e.response?this.response=e.response:null!==e.data&&\"object\"==typeof e.data?this.response=e.data:this.response={}),this.originalError||e instanceof ClientResponseError||(this.originalError=e),\"undefined\"!=typeof DOMException&&e instanceof DOMException&&(this.isAbort=!0),this.name=\"ClientResponseError \"+this.status,this.message=this.response?.message,this.message||(this.isAbort?this.message=\"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\":this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")?this.message=\"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\":this.message=\"Something went wrong while processing your request.\")}get data(){return this.response}toJSON(){return{...this}}}const e=/^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;function cookieParse(e,t){const s={};if(\"string\"!=typeof e)return s;const i=Object.assign({},t||{}).decode||defaultDecode;let n=0;for(;n<e.length;){const t=e.indexOf(\"=\",n);if(-1===t)break;let r=e.indexOf(\";\",n);if(-1===r)r=e.length;else if(r<t){n=e.lastIndexOf(\";\",t-1)+1;continue}const o=e.slice(n,t).trim();if(void 0===s[o]){let n=e.slice(t+1,r).trim();34===n.charCodeAt(0)&&(n=n.slice(1,-1));try{s[o]=i(n)}catch(e){s[o]=n}}n=r+1}return s}function cookieSerialize(t,s,i){const n=Object.assign({},i||{}),r=n.encode||defaultEncode;if(!e.test(t))throw new TypeError(\"argument name is invalid\");const o=r(s);if(o&&!e.test(o))throw new TypeError(\"argument val is invalid\");let a=t+\"=\"+o;if(null!=n.maxAge){const e=n.maxAge-0;if(isNaN(e)||!isFinite(e))throw new TypeError(\"option maxAge is invalid\");a+=\"; Max-Age=\"+Math.floor(e)}if(n.domain){if(!e.test(n.domain))throw new TypeError(\"option domain is invalid\");a+=\"; Domain=\"+n.domain}if(n.path){if(!e.test(n.path))throw new TypeError(\"option path is invalid\");a+=\"; Path=\"+n.path}if(n.expires){if(!function isDate(e){return\"[object Date]\"===Object.prototype.toString.call(e)||e instanceof Date}(n.expires)||isNaN(n.expires.valueOf()))throw new TypeError(\"option expires is invalid\");a+=\"; Expires=\"+n.expires.toUTCString()}if(n.httpOnly&&(a+=\"; HttpOnly\"),n.secure&&(a+=\"; Secure\"),n.priority){switch(\"string\"==typeof n.priority?n.priority.toLowerCase():n.priority){case\"low\":a+=\"; Priority=Low\";break;case\"medium\":a+=\"; Priority=Medium\";break;case\"high\":a+=\"; Priority=High\";break;default:throw new TypeError(\"option priority is invalid\")}}if(n.sameSite){switch(\"string\"==typeof n.sameSite?n.sameSite.toLowerCase():n.sameSite){case!0:a+=\"; SameSite=Strict\";break;case\"lax\":a+=\"; SameSite=Lax\";break;case\"strict\":a+=\"; SameSite=Strict\";break;case\"none\":a+=\"; SameSite=None\";break;default:throw new TypeError(\"option sameSite is invalid\")}}return a}function defaultDecode(e){return-1!==e.indexOf(\"%\")?decodeURIComponent(e):e}function defaultEncode(e){return encodeURIComponent(e)}const t=\"undefined\"!=typeof navigator&&\"ReactNative\"===navigator.product||\"undefined\"!=typeof global&&global.HermesInternal;let s;function getTokenPayload(e){if(e)try{const t=decodeURIComponent(s(e.split(\".\")[1]).split(\"\").map((function(e){return\"%\"+(\"00\"+e.charCodeAt(0).toString(16)).slice(-2)})).join(\"\"));return JSON.parse(t)||{}}catch(e){}return{}}function isTokenExpired(e,t=0){let s=getTokenPayload(e);return!(Object.keys(s).length>0&&(!s.exp||s.exp-t>Date.now()/1e3))}s=\"function\"!=typeof atob||t?e=>{let t=String(e).replace(/=+$/,\"\");if(t.length%4==1)throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var s,i,n=0,r=0,o=\"\";i=t.charAt(r++);~i&&(s=n%4?64*s+i:i,n++%4)?o+=String.fromCharCode(255&s>>(-2*n&6)):0)i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(i);return o}:atob;const i=\"pb_auth\";class BaseAuthStore{constructor(){this.baseToken=\"\",this.baseModel=null,this._onChangeCallbacks=[]}get token(){return this.baseToken}get model(){return this.baseModel}get isValid(){return!isTokenExpired(this.token)}get isAdmin(){return\"admin\"===getTokenPayload(this.token).type}get isAuthRecord(){return\"authRecord\"===getTokenPayload(this.token).type}save(e,t){this.baseToken=e||\"\",this.baseModel=t||null,this.triggerChange()}clear(){this.baseToken=\"\",this.baseModel=null,this.triggerChange()}loadFromCookie(e,t=i){const s=cookieParse(e||\"\")[t]||\"\";let n={};try{n=JSON.parse(s),(null===typeof n||\"object\"!=typeof n||Array.isArray(n))&&(n={})}catch(e){}this.save(n.token||\"\",n.model||null)}exportToCookie(e,t=i){const s={secure:!0,sameSite:!0,httpOnly:!0,path:\"/\"},n=getTokenPayload(this.token);s.expires=n?.exp?new Date(1e3*n.exp):new Date(\"1970-01-01\"),e=Object.assign({},s,e);const r={token:this.token,model:this.model?JSON.parse(JSON.stringify(this.model)):null};let o=cookieSerialize(t,JSON.stringify(r),e);const a=\"undefined\"!=typeof Blob?new Blob([o]).size:o.length;if(r.model&&a>4096){r.model={id:r?.model?.id,email:r?.model?.email};const s=[\"collectionId\",\"username\",\"verified\"];for(const e in this.model)s.includes(e)&&(r.model[e]=this.model[e]);o=cookieSerialize(t,JSON.stringify(r),e)}return o}onChange(e,t=!1){return this._onChangeCallbacks.push(e),t&&e(this.token,this.model),()=>{for(let t=this._onChangeCallbacks.length-1;t>=0;t--)if(this._onChangeCallbacks[t]==e)return delete this._onChangeCallbacks[t],void this._onChangeCallbacks.splice(t,1)}}triggerChange(){for(const e of this._onChangeCallbacks)e&&e(this.token,this.model)}}class LocalAuthStore extends BaseAuthStore{constructor(e=\"pocketbase_auth\"){super(),this.storageFallback={},this.storageKey=e,this._bindStorageEvent()}get token(){return(this._storageGet(this.storageKey)||{}).token||\"\"}get model(){return(this._storageGet(this.storageKey)||{}).model||null}save(e,t){this._storageSet(this.storageKey,{token:e,model:t}),super.save(e,t)}clear(){this._storageRemove(this.storageKey),super.clear()}_storageGet(e){if(\"undefined\"!=typeof window&&window?.localStorage){const t=window.localStorage.getItem(e)||\"\";try{return JSON.parse(t)}catch(e){return t}}return this.storageFallback[e]}_storageSet(e,t){if(\"undefined\"!=typeof window&&window?.localStorage){let s=t;\"string\"!=typeof t&&(s=JSON.stringify(t)),window.localStorage.setItem(e,s)}else this.storageFallback[e]=t}_storageRemove(e){\"undefined\"!=typeof window&&window?.localStorage&&window.localStorage?.removeItem(e),delete this.storageFallback[e]}_bindStorageEvent(){\"undefined\"!=typeof window&&window?.localStorage&&window.addEventListener&&window.addEventListener(\"storage\",(e=>{if(e.key!=this.storageKey)return;const t=this._storageGet(this.storageKey)||{};super.save(t.token||\"\",t.model||null)}))}}class BaseService{constructor(e){this.client=e}}class SettingsService extends BaseService{async getAll(e){return e=Object.assign({method:\"GET\"},e),this.client.send(\"/api/settings\",e)}async update(e,t){return t=Object.assign({method:\"PATCH\",body:e},t),this.client.send(\"/api/settings\",t)}async testS3(e=\"storage\",t){return t=Object.assign({method:\"POST\",body:{filesystem:e}},t),this.client.send(\"/api/settings/test/s3\",t).then((()=>!0))}async testEmail(e,t,s){return s=Object.assign({method:\"POST\",body:{email:e,template:t}},s),this.client.send(\"/api/settings/test/email\",s).then((()=>!0))}async generateAppleClientSecret(e,t,s,i,n,r){return r=Object.assign({method:\"POST\",body:{clientId:e,teamId:t,keyId:s,privateKey:i,duration:n}},r),this.client.send(\"/api/settings/apple/generate-client-secret\",r)}}class CrudService extends BaseService{decode(e){return e}async getFullList(e,t){if(\"number\"==typeof e)return this._getFullList(e,t);let s=500;return(t=Object.assign({},e,t)).batch&&(s=t.batch,delete t.batch),this._getFullList(s,t)}async getList(e=1,t=30,s){return(s=Object.assign({method:\"GET\"},s)).query=Object.assign({page:e,perPage:t},s.query),this.client.send(this.baseCrudPath,s).then((e=>(e.items=e.items?.map((e=>this.decode(e)))||[],e)))}async getFirstListItem(e,t){return(t=Object.assign({requestKey:\"one_by_filter_\"+this.baseCrudPath+\"_\"+e},t)).query=Object.assign({filter:e,skipTotal:1},t.query),this.getList(1,1,t).then((e=>{if(!e?.items?.length)throw new ClientResponseError({status:404,response:{code:404,message:\"The requested resource wasn't found.\",data:{}}});return e.items[0]}))}async getOne(e,t){if(!e)throw new ClientResponseError({url:this.client.buildUrl(this.baseCrudPath+\"/\"),status:404,response:{code:404,message:\"Missing required record id.\",data:{}}});return t=Object.assign({method:\"GET\"},t),this.client.send(this.baseCrudPath+\"/\"+encodeURIComponent(e),t).then((e=>this.decode(e)))}async create(e,t){return t=Object.assign({method:\"POST\",body:e},t),this.client.send(this.baseCrudPath,t).then((e=>this.decode(e)))}async update(e,t,s){return s=Object.assign({method:\"PATCH\",body:t},s),this.client.send(this.baseCrudPath+\"/\"+encodeURIComponent(e),s).then((e=>this.decode(e)))}async delete(e,t){return t=Object.assign({method:\"DELETE\"},t),this.client.send(this.baseCrudPath+\"/\"+encodeURIComponent(e),t).then((()=>!0))}_getFullList(e=500,t){(t=t||{}).query=Object.assign({skipTotal:1},t.query);let s=[],request=async i=>this.getList(i,e||500,t).then((e=>{const t=e.items;return s=s.concat(t),t.length==e.perPage?request(i+1):s}));return request(1)}}function normalizeLegacyOptionsArgs(e,t,s,i){const n=void 0!==i;return n||void 0!==s?n?(console.warn(e),t.body=Object.assign({},t.body,s),t.query=Object.assign({},t.query,i),t):Object.assign(t,s):t}function resetAutoRefresh(e){e._resetAutoRefresh?.()}class AdminService extends CrudService{get baseCrudPath(){return\"/api/admins\"}async update(e,t,s){return super.update(e,t,s).then((e=>(this.client.authStore.model?.id===e.id&&void 0===this.client.authStore.model?.collectionId&&this.client.authStore.save(this.client.authStore.token,e),e)))}async delete(e,t){return super.delete(e,t).then((t=>(t&&this.client.authStore.model?.id===e&&void 0===this.client.authStore.model?.collectionId&&this.client.authStore.clear(),t)))}authResponse(e){const t=this.decode(e?.admin||{});return e?.token&&e?.admin&&this.client.authStore.save(e.token,t),Object.assign({},e,{token:e?.token||\"\",admin:t})}async authWithPassword(e,t,s,i){let n={method:\"POST\",body:{identity:e,password:t}};n=normalizeLegacyOptionsArgs(\"This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).\",n,s,i);const r=n.autoRefreshThreshold;delete n.autoRefreshThreshold,n.autoRefresh||resetAutoRefresh(this.client);let o=await this.client.send(this.baseCrudPath+\"/auth-with-password\",n);return o=this.authResponse(o),r&&function registerAutoRefresh(e,t,s,i){resetAutoRefresh(e);const n=e.beforeSend,r=e.authStore.model,o=e.authStore.onChange(((t,s)=>{(!t||s?.id!=r?.id||(s?.collectionId||r?.collectionId)&&s?.collectionId!=r?.collectionId)&&resetAutoRefresh(e)}));e._resetAutoRefresh=function(){o(),e.beforeSend=n,delete e._resetAutoRefresh},e.beforeSend=async(r,o)=>{const a=e.authStore.token;if(o.query?.autoRefresh)return n?n(r,o):{url:r,sendOptions:o};let c=e.authStore.isValid;if(c&&isTokenExpired(e.authStore.token,t))try{await s()}catch(e){c=!1}c||await i();const l=o.headers||{};for(let t in l)if(\"authorization\"==t.toLowerCase()&&a==l[t]&&e.authStore.token){l[t]=e.authStore.token;break}return o.headers=l,n?n(r,o):{url:r,sendOptions:o}}}(this.client,r,(()=>this.authRefresh({autoRefresh:!0})),(()=>this.authWithPassword(e,t,Object.assign({autoRefresh:!0},n)))),o}async authRefresh(e,t){let s={method:\"POST\"};return s=normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",s,e,t),this.client.send(this.baseCrudPath+\"/auth-refresh\",s).then(this.authResponse.bind(this))}async requestPasswordReset(e,t,s){let i={method:\"POST\",body:{email:e}};return i=normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",i,t,s),this.client.send(this.baseCrudPath+\"/request-password-reset\",i).then((()=>!0))}async confirmPasswordReset(e,t,s,i,n){let r={method:\"POST\",body:{token:e,password:t,passwordConfirm:s}};return r=normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).\",r,i,n),this.client.send(this.baseCrudPath+\"/confirm-password-reset\",r).then((()=>!0))}}const n=[\"requestKey\",\"$cancelKey\",\"$autoCancel\",\"fetch\",\"headers\",\"body\",\"query\",\"params\",\"cache\",\"credentials\",\"headers\",\"integrity\",\"keepalive\",\"method\",\"mode\",\"redirect\",\"referrer\",\"referrerPolicy\",\"signal\",\"window\"];function normalizeUnknownQueryParams(e){if(e){e.query=e.query||{};for(let t in e)n.includes(t)||(e.query[t]=e[t],delete e[t])}}class RealtimeService extends BaseService{constructor(){super(...arguments),this.clientId=\"\",this.eventSource=null,this.subscriptions={},this.lastSentSubscriptions=[],this.maxConnectTimeout=15e3,this.reconnectAttempts=0,this.maxReconnectAttempts=1/0,this.predefinedReconnectIntervals=[200,300,500,1e3,1200,1500,2e3],this.pendingConnects=[]}get isConnected(){return!!this.eventSource&&!!this.clientId&&!this.pendingConnects.length}async subscribe(e,t,s){if(!e)throw new Error(\"topic must be set.\");let i=e;if(s){normalizeUnknownQueryParams(s=Object.assign({},s));const e=\"options=\"+encodeURIComponent(JSON.stringify({query:s.query,headers:s.headers}));i+=(i.includes(\"?\")?\"&\":\"?\")+e}const listener=function(e){const s=e;let i;try{i=JSON.parse(s?.data)}catch{}t(i||{})};return this.subscriptions[i]||(this.subscriptions[i]=[]),this.subscriptions[i].push(listener),this.isConnected?1===this.subscriptions[i].length?await this.submitSubscriptions():this.eventSource?.addEventListener(i,listener):await this.connect(),async()=>this.unsubscribeByTopicAndListener(e,listener)}async unsubscribe(e){let t=!1;if(e){const s=this.getSubscriptionsByTopic(e);for(let e in s)if(this.hasSubscriptionListeners(e)){for(let t of this.subscriptions[e])this.eventSource?.removeEventListener(e,t);delete this.subscriptions[e],t||(t=!0)}}else this.subscriptions={};this.hasSubscriptionListeners()?t&&await this.submitSubscriptions():this.disconnect()}async unsubscribeByPrefix(e){let t=!1;for(let s in this.subscriptions)if((s+\"?\").startsWith(e)){t=!0;for(let e of this.subscriptions[s])this.eventSource?.removeEventListener(s,e);delete this.subscriptions[s]}t&&(this.hasSubscriptionListeners()?await this.submitSubscriptions():this.disconnect())}async unsubscribeByTopicAndListener(e,t){let s=!1;const i=this.getSubscriptionsByTopic(e);for(let e in i){if(!Array.isArray(this.subscriptions[e])||!this.subscriptions[e].length)continue;let i=!1;for(let s=this.subscriptions[e].length-1;s>=0;s--)this.subscriptions[e][s]===t&&(i=!0,delete this.subscriptions[e][s],this.subscriptions[e].splice(s,1),this.eventSource?.removeEventListener(e,t));i&&(this.subscriptions[e].length||delete this.subscriptions[e],s||this.hasSubscriptionListeners(e)||(s=!0))}this.hasSubscriptionListeners()?s&&await this.submitSubscriptions():this.disconnect()}hasSubscriptionListeners(e){if(this.subscriptions=this.subscriptions||{},e)return!!this.subscriptions[e]?.length;for(let e in this.subscriptions)if(this.subscriptions[e]?.length)return!0;return!1}async submitSubscriptions(){if(this.clientId)return this.addAllSubscriptionListeners(),this.lastSentSubscriptions=this.getNonEmptySubscriptionKeys(),this.client.send(\"/api/realtime\",{method:\"POST\",body:{clientId:this.clientId,subscriptions:this.lastSentSubscriptions},requestKey:this.getSubscriptionsCancelKey()}).catch((e=>{if(!e?.isAbort)throw e}))}getSubscriptionsCancelKey(){return\"realtime_\"+this.clientId}getSubscriptionsByTopic(e){const t={};e=e.includes(\"?\")?e:e+\"?\";for(let s in this.subscriptions)(s+\"?\").startsWith(e)&&(t[s]=this.subscriptions[s]);return t}getNonEmptySubscriptionKeys(){const e=[];for(let t in this.subscriptions)this.subscriptions[t].length&&e.push(t);return e}addAllSubscriptionListeners(){if(this.eventSource){this.removeAllSubscriptionListeners();for(let e in this.subscriptions)for(let t of this.subscriptions[e])this.eventSource.addEventListener(e,t)}}removeAllSubscriptionListeners(){if(this.eventSource)for(let e in this.subscriptions)for(let t of this.subscriptions[e])this.eventSource.removeEventListener(e,t)}async connect(){if(!(this.reconnectAttempts>0))return new Promise(((e,t)=>{this.pendingConnects.push({resolve:e,reject:t}),this.pendingConnects.length>1||this.initConnect()}))}initConnect(){this.disconnect(!0),clearTimeout(this.connectTimeoutId),this.connectTimeoutId=setTimeout((()=>{this.connectErrorHandler(new Error(\"EventSource connect took too long.\"))}),this.maxConnectTimeout),this.eventSource=new EventSource(this.client.buildUrl(\"/api/realtime\")),this.eventSource.onerror=e=>{this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"))},this.eventSource.addEventListener(\"PB_CONNECT\",(e=>{const t=e;this.clientId=t?.lastEventId,this.submitSubscriptions().then((async()=>{let e=3;for(;this.hasUnsentSubscriptions()&&e>0;)e--,await this.submitSubscriptions()})).then((()=>{for(let e of this.pendingConnects)e.resolve();this.pendingConnects=[],this.reconnectAttempts=0,clearTimeout(this.reconnectTimeoutId),clearTimeout(this.connectTimeoutId);const t=this.getSubscriptionsByTopic(\"PB_CONNECT\");for(let s in t)for(let i of t[s])i(e)})).catch((e=>{this.clientId=\"\",this.connectErrorHandler(e)}))}))}hasUnsentSubscriptions(){const e=this.getNonEmptySubscriptionKeys();if(e.length!=this.lastSentSubscriptions.length)return!0;for(const t of e)if(!this.lastSentSubscriptions.includes(t))return!0;return!1}connectErrorHandler(e){if(clearTimeout(this.connectTimeoutId),clearTimeout(this.reconnectTimeoutId),!this.clientId&&!this.reconnectAttempts||this.reconnectAttempts>this.maxReconnectAttempts){for(let t of this.pendingConnects)t.reject(new ClientResponseError(e));return this.pendingConnects=[],void this.disconnect()}this.disconnect(!0);const t=this.predefinedReconnectIntervals[this.reconnectAttempts]||this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length-1];this.reconnectAttempts++,this.reconnectTimeoutId=setTimeout((()=>{this.initConnect()}),t)}disconnect(e=!1){if(clearTimeout(this.connectTimeoutId),clearTimeout(this.reconnectTimeoutId),this.removeAllSubscriptionListeners(),this.client.cancelRequest(this.getSubscriptionsCancelKey()),this.eventSource?.close(),this.eventSource=null,this.clientId=\"\",!e){this.reconnectAttempts=0;for(let e of this.pendingConnects)e.resolve();this.pendingConnects=[]}}}class RecordService extends CrudService{constructor(e,t){super(e),this.collectionIdOrName=t}get baseCrudPath(){return this.baseCollectionPath+\"/records\"}get baseCollectionPath(){return\"/api/collections/\"+encodeURIComponent(this.collectionIdOrName)}async subscribe(e,t,s){if(!e)throw new Error(\"Missing topic.\");if(!t)throw new Error(\"Missing subscription callback.\");return this.client.realtime.subscribe(this.collectionIdOrName+\"/\"+e,t,s)}async unsubscribe(e){return e?this.client.realtime.unsubscribe(this.collectionIdOrName+\"/\"+e):this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName)}async getFullList(e,t){if(\"number\"==typeof e)return super.getFullList(e,t);const s=Object.assign({},e,t);return super.getFullList(s)}async getList(e=1,t=30,s){return super.getList(e,t,s)}async getFirstListItem(e,t){return super.getFirstListItem(e,t)}async getOne(e,t){return super.getOne(e,t)}async create(e,t){return super.create(e,t)}async update(e,t,s){return super.update(e,t,s).then((e=>(this.client.authStore.model?.id!==e?.id||this.client.authStore.model?.collectionId!==this.collectionIdOrName&&this.client.authStore.model?.collectionName!==this.collectionIdOrName||this.client.authStore.save(this.client.authStore.token,e),e)))}async delete(e,t){return super.delete(e,t).then((t=>(!t||this.client.authStore.model?.id!==e||this.client.authStore.model?.collectionId!==this.collectionIdOrName&&this.client.authStore.model?.collectionName!==this.collectionIdOrName||this.client.authStore.clear(),t)))}authResponse(e){const t=this.decode(e?.record||{});return this.client.authStore.save(e?.token,t),Object.assign({},e,{token:e?.token||\"\",record:t})}async listAuthMethods(e){return e=Object.assign({method:\"GET\"},e),this.client.send(this.baseCollectionPath+\"/auth-methods\",e).then((e=>Object.assign({},e,{usernamePassword:!!e?.usernamePassword,emailPassword:!!e?.emailPassword,authProviders:Array.isArray(e?.authProviders)?e?.authProviders:[]})))}async authWithPassword(e,t,s,i){let n={method:\"POST\",body:{identity:e,password:t}};return n=normalizeLegacyOptionsArgs(\"This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).\",n,s,i),this.client.send(this.baseCollectionPath+\"/auth-with-password\",n).then((e=>this.authResponse(e)))}async authWithOAuth2Code(e,t,s,i,n,r,o){let a={method:\"POST\",body:{provider:e,code:t,codeVerifier:s,redirectUrl:i,createData:n}};return a=normalizeLegacyOptionsArgs(\"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\",a,r,o),this.client.send(this.baseCollectionPath+\"/auth-with-oauth2\",a).then((e=>this.authResponse(e)))}authWithOAuth2(...e){if(e.length>1||\"string\"==typeof e?.[0])return console.warn(\"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\"),this.authWithOAuth2Code(e?.[0]||\"\",e?.[1]||\"\",e?.[2]||\"\",e?.[3]||\"\",e?.[4]||{},e?.[5]||{},e?.[6]||{});const t=e?.[0]||{};let s=null;t.urlCallback||(s=openBrowserPopup(void 0));const i=new RealtimeService(this.client);function cleanup(){s?.close(),i.unsubscribe()}const n={},r=t.requestKey;return r&&(n.requestKey=r),this.listAuthMethods(n).then((e=>{const n=e.authProviders.find((e=>e.name===t.provider));if(!n)throw new ClientResponseError(new Error(`Missing or invalid provider \"${t.provider}\".`));const o=this.client.buildUrl(\"/api/oauth2-redirect\"),a=r?this.client.cancelControllers?.[r]:void 0;return a&&(a.signal.onabort=()=>{cleanup()}),new Promise((async(e,r)=>{try{await i.subscribe(\"@oauth2\",(async s=>{const c=i.clientId;try{if(!s.state||c!==s.state)throw new Error(\"State parameters don't match.\");if(s.error||!s.code)throw new Error(\"OAuth2 redirect error or missing code: \"+s.error);const i=Object.assign({},t);delete i.provider,delete i.scopes,delete i.createData,delete i.urlCallback,a?.signal?.onabort&&(a.signal.onabort=null);const r=await this.authWithOAuth2Code(n.name,s.code,n.codeVerifier,o,t.createData,i);e(r)}catch(e){r(new ClientResponseError(e))}cleanup()}));const c={state:i.clientId};t.scopes?.length&&(c.scope=t.scopes.join(\" \"));const l=this._replaceQueryParams(n.authUrl+o,c);let h=t.urlCallback||function(e){s?s.location.href=e:s=openBrowserPopup(e)};await h(l)}catch(e){cleanup(),r(new ClientResponseError(e))}}))})).catch((e=>{throw cleanup(),e}))}async authRefresh(e,t){let s={method:\"POST\"};return s=normalizeLegacyOptionsArgs(\"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",s,e,t),this.client.send(this.baseCollectionPath+\"/auth-refresh\",s).then((e=>this.authResponse(e)))}async requestPasswordReset(e,t,s){let i={method:\"POST\",body:{email:e}};return i=normalizeLegacyOptionsArgs(\"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",i,t,s),this.client.send(this.baseCollectionPath+\"/request-password-reset\",i).then((()=>!0))}async confirmPasswordReset(e,t,s,i,n){let r={method:\"POST\",body:{token:e,password:t,passwordConfirm:s}};return r=normalizeLegacyOptionsArgs(\"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",r,i,n),this.client.send(this.baseCollectionPath+\"/confirm-password-reset\",r).then((()=>!0))}async requestVerification(e,t,s){let i={method:\"POST\",body:{email:e}};return i=normalizeLegacyOptionsArgs(\"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",i,t,s),this.client.send(this.baseCollectionPath+\"/request-verification\",i).then((()=>!0))}async confirmVerification(e,t,s){let i={method:\"POST\",body:{token:e}};return i=normalizeLegacyOptionsArgs(\"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",i,t,s),this.client.send(this.baseCollectionPath+\"/confirm-verification\",i).then((()=>{const t=getTokenPayload(e),s=this.client.authStore.model;return s&&!s.verified&&s.id===t.id&&s.collectionId===t.collectionId&&(s.verified=!0,this.client.authStore.save(this.client.authStore.token,s)),!0}))}async requestEmailChange(e,t,s){let i={method:\"POST\",body:{newEmail:e}};return i=normalizeLegacyOptionsArgs(\"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",i,t,s),this.client.send(this.baseCollectionPath+\"/request-email-change\",i).then((()=>!0))}async confirmEmailChange(e,t,s,i){let n={method:\"POST\",body:{token:e,password:t}};return n=normalizeLegacyOptionsArgs(\"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",n,s,i),this.client.send(this.baseCollectionPath+\"/confirm-email-change\",n).then((()=>{const t=getTokenPayload(e),s=this.client.authStore.model;return s&&s.id===t.id&&s.collectionId===t.collectionId&&this.client.authStore.clear(),!0}))}async listExternalAuths(e,t){return t=Object.assign({method:\"GET\"},t),this.client.send(this.baseCrudPath+\"/\"+encodeURIComponent(e)+\"/external-auths\",t)}async unlinkExternalAuth(e,t,s){return s=Object.assign({method:\"DELETE\"},s),this.client.send(this.baseCrudPath+\"/\"+encodeURIComponent(e)+\"/external-auths/\"+encodeURIComponent(t),s).then((()=>!0))}_replaceQueryParams(e,t={}){let s=e,i=\"\";e.indexOf(\"?\")>=0&&(s=e.substring(0,e.indexOf(\"?\")),i=e.substring(e.indexOf(\"?\")+1));const n={},r=i.split(\"&\");for(const e of r){if(\"\"==e)continue;const t=e.split(\"=\");n[decodeURIComponent(t[0].replace(/\\+/g,\" \"))]=decodeURIComponent((t[1]||\"\").replace(/\\+/g,\" \"))}for(let e in t)t.hasOwnProperty(e)&&(null==t[e]?delete n[e]:n[e]=t[e]);i=\"\";for(let e in n)n.hasOwnProperty(e)&&(\"\"!=i&&(i+=\"&\"),i+=encodeURIComponent(e.replace(/%20/g,\"+\"))+\"=\"+encodeURIComponent(n[e].replace(/%20/g,\"+\")));return\"\"!=i?s+\"?\"+i:s}}function openBrowserPopup(e){if(\"undefined\"==typeof window||!window?.open)throw new ClientResponseError(new Error(\"Not in a browser context - please pass a custom urlCallback function.\"));let t=1024,s=768,i=window.innerWidth,n=window.innerHeight;t=t>i?i:t,s=s>n?n:s;let r=i/2-t/2,o=n/2-s/2;return window.open(e,\"popup_window\",\"width=\"+t+\",height=\"+s+\",top=\"+o+\",left=\"+r+\",resizable,menubar=no\")}class CollectionService extends CrudService{get baseCrudPath(){return\"/api/collections\"}async import(e,t=!1,s){return s=Object.assign({method:\"PUT\",body:{collections:e,deleteMissing:t}},s),this.client.send(this.baseCrudPath+\"/import\",s).then((()=>!0))}}class LogService extends BaseService{async getList(e=1,t=30,s){return(s=Object.assign({method:\"GET\"},s)).query=Object.assign({page:e,perPage:t},s.query),this.client.send(\"/api/logs\",s)}async getOne(e,t){if(!e)throw new ClientResponseError({url:this.client.buildUrl(\"/api/logs/\"),status:404,response:{code:404,message:\"Missing required log id.\",data:{}}});return t=Object.assign({method:\"GET\"},t),this.client.send(\"/api/logs/\"+encodeURIComponent(e),t)}async getStats(e){return e=Object.assign({method:\"GET\"},e),this.client.send(\"/api/logs/stats\",e)}}class HealthService extends BaseService{async check(e){return e=Object.assign({method:\"GET\"},e),this.client.send(\"/api/health\",e)}}class FileService extends BaseService{getUrl(e,t,s={}){if(!t||!e?.id||!e?.collectionId&&!e?.collectionName)return\"\";const i=[];i.push(\"api\"),i.push(\"files\"),i.push(encodeURIComponent(e.collectionId||e.collectionName)),i.push(encodeURIComponent(e.id)),i.push(encodeURIComponent(t));let n=this.client.buildUrl(i.join(\"/\"));if(Object.keys(s).length){!1===s.download&&delete s.download;const e=new URLSearchParams(s);n+=(n.includes(\"?\")?\"&\":\"?\")+e}return n}async getToken(e){return e=Object.assign({method:\"POST\"},e),this.client.send(\"/api/files/token\",e).then((e=>e?.token||\"\"))}}class BackupService extends BaseService{async getFullList(e){return e=Object.assign({method:\"GET\"},e),this.client.send(\"/api/backups\",e)}async create(e,t){return t=Object.assign({method:\"POST\",body:{name:e}},t),this.client.send(\"/api/backups\",t).then((()=>!0))}async upload(e,t){return t=Object.assign({method:\"POST\",body:e},t),this.client.send(\"/api/backups/upload\",t).then((()=>!0))}async delete(e,t){return t=Object.assign({method:\"DELETE\"},t),this.client.send(`/api/backups/${encodeURIComponent(e)}`,t).then((()=>!0))}async restore(e,t){return t=Object.assign({method:\"POST\"},t),this.client.send(`/api/backups/${encodeURIComponent(e)}/restore`,t).then((()=>!0))}getDownloadUrl(e,t){return this.client.buildUrl(`/api/backups/${encodeURIComponent(t)}?token=${encodeURIComponent(e)}`)}}class Client{constructor(e=\"/\",t,s=\"en-US\"){this.cancelControllers={},this.recordServices={},this.enableAutoCancellation=!0,this.baseUrl=e,this.lang=s,this.authStore=t||new LocalAuthStore,this.admins=new AdminService(this),this.collections=new CollectionService(this),this.files=new FileService(this),this.logs=new LogService(this),this.settings=new SettingsService(this),this.realtime=new RealtimeService(this),this.health=new HealthService(this),this.backups=new BackupService(this)}collection(e){return this.recordServices[e]||(this.recordServices[e]=new RecordService(this,e)),this.recordServices[e]}autoCancellation(e){return this.enableAutoCancellation=!!e,this}cancelRequest(e){return this.cancelControllers[e]&&(this.cancelControllers[e].abort(),delete this.cancelControllers[e]),this}cancelAllRequests(){for(let e in this.cancelControllers)this.cancelControllers[e].abort();return this.cancelControllers={},this}filter(e,t){if(!t)return e;for(let s in t){let i=t[s];switch(typeof i){case\"boolean\":case\"number\":i=\"\"+i;break;case\"string\":i=\"'\"+i.replace(/'/g,\"\\\\'\")+\"'\";break;default:i=null===i?\"null\":i instanceof Date?\"'\"+i.toISOString().replace(\"T\",\" \")+\"'\":\"'\"+JSON.stringify(i).replace(/'/g,\"\\\\'\")+\"'\"}e=e.replaceAll(\"{:\"+s+\"}\",i)}return e}getFileUrl(e,t,s={}){return this.files.getUrl(e,t,s)}buildUrl(e){let t=this.baseUrl;return\"undefined\"==typeof window||!window.location||t.startsWith(\"https://\")||t.startsWith(\"http://\")||(t=window.location.origin?.endsWith(\"/\")?window.location.origin.substring(0,window.location.origin.length-1):window.location.origin||\"\",this.baseUrl.startsWith(\"/\")||(t+=window.location.pathname||\"/\",t+=t.endsWith(\"/\")?\"\":\"/\"),t+=this.baseUrl),e&&(t+=t.endsWith(\"/\")?\"\":\"/\",t+=e.startsWith(\"/\")?e.substring(1):e),t}async send(e,t){t=this.initSendOptions(e,t);let s=this.buildUrl(e);if(this.beforeSend){const e=Object.assign({},await this.beforeSend(s,t));void 0!==e.url||void 0!==e.options?(s=e.url||s,t=e.options||t):Object.keys(e).length&&(t=e,console?.warn&&console.warn(\"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\"))}if(void 0!==t.query){const e=this.serializeQueryParams(t.query);e&&(s+=(s.includes(\"?\")?\"&\":\"?\")+e),delete t.query}\"application/json\"==this.getHeader(t.headers,\"Content-Type\")&&t.body&&\"string\"!=typeof t.body&&(t.body=JSON.stringify(t.body));return(t.fetch||fetch)(s,t).then((async e=>{let t={};try{t=await e.json()}catch(e){}if(this.afterSend&&(t=await this.afterSend(e,t)),e.status>=400)throw new ClientResponseError({url:e.url,status:e.status,data:t});return t})).catch((e=>{throw new ClientResponseError(e)}))}initSendOptions(e,t){if((t=Object.assign({method:\"GET\"},t)).body=this.convertToFormDataIfNeeded(t.body),normalizeUnknownQueryParams(t),t.query=Object.assign({},t.params,t.query),void 0===t.requestKey&&(!1===t.$autoCancel||!1===t.query.$autoCancel?t.requestKey=null:(t.$cancelKey||t.query.$cancelKey)&&(t.requestKey=t.$cancelKey||t.query.$cancelKey)),delete t.$autoCancel,delete t.query.$autoCancel,delete t.$cancelKey,delete t.query.$cancelKey,null!==this.getHeader(t.headers,\"Content-Type\")||this.isFormData(t.body)||(t.headers=Object.assign({},t.headers,{\"Content-Type\":\"application/json\"})),null===this.getHeader(t.headers,\"Accept-Language\")&&(t.headers=Object.assign({},t.headers,{\"Accept-Language\":this.lang})),this.authStore.token&&null===this.getHeader(t.headers,\"Authorization\")&&(t.headers=Object.assign({},t.headers,{Authorization:this.authStore.token})),this.enableAutoCancellation&&null!==t.requestKey){const s=t.requestKey||(t.method||\"GET\")+e;delete t.requestKey,this.cancelRequest(s);const i=new AbortController;this.cancelControllers[s]=i,t.signal=i.signal}return t}convertToFormDataIfNeeded(e){if(\"undefined\"==typeof FormData||void 0===e||\"object\"!=typeof e||null===e||this.isFormData(e)||!this.hasBlobField(e))return e;const t=new FormData;for(const s in e){const i=e[s];if(\"object\"!=typeof i||this.hasBlobField({data:i})){const e=Array.isArray(i)?i:[i];for(let i of e)t.append(s,i)}else{let e={};e[s]=i,t.append(\"@jsonPayload\",JSON.stringify(e))}}return t}hasBlobField(e){for(const t in e){const s=Array.isArray(e[t])?e[t]:[e[t]];for(const e of s)if(\"undefined\"!=typeof Blob&&e instanceof Blob||\"undefined\"!=typeof File&&e instanceof File)return!0}return!1}getHeader(e,t){e=e||{},t=t.toLowerCase();for(let s in e)if(s.toLowerCase()==t)return e[s];return null}isFormData(e){return e&&(\"FormData\"===e.constructor.name||\"undefined\"!=typeof FormData&&e instanceof FormData)}serializeQueryParams(e){const t=[];for(const s in e){if(null===e[s])continue;const i=e[s],n=encodeURIComponent(s);if(Array.isArray(i))for(const e of i)t.push(n+\"=\"+encodeURIComponent(e));else i instanceof Date?t.push(n+\"=\"+encodeURIComponent(i.toISOString())):null!==typeof i&&\"object\"==typeof i?t.push(n+\"=\"+encodeURIComponent(JSON.stringify(i))):t.push(n+\"=\"+encodeURIComponent(i))}return t.join(\"&\")}}class AsyncAuthStore extends BaseAuthStore{constructor(e){super(),this.queue=[],this.saveFunc=e.save,this.clearFunc=e.clear,this._enqueue((()=>this._loadInitial(e.initial)))}save(e,t){super.save(e,t);let s=\"\";try{s=JSON.stringify({token:e,model:t})}catch(e){console.warn(\"AsyncAuthStore: failed to stringify the new state\")}this._enqueue((()=>this.saveFunc(s)))}clear(){super.clear(),this.clearFunc?this._enqueue((()=>this.clearFunc())):this._enqueue((()=>this.saveFunc(\"\")))}async _loadInitial(e){try{if(e=await e){let t;\"string\"==typeof e?t=JSON.parse(e)||{}:\"object\"==typeof e&&(t=e),this.save(t.token||\"\",t.model||null)}}catch(e){}}_enqueue(e){this.queue.push(e),1==this.queue.length&&this._dequeue()}_dequeue(){this.queue.length&&this.queue[0]().finally((()=>{this.queue.shift(),this.queue.length&&this._dequeue()}))}}\n//# sourceMappingURL=pocketbase.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pocketbase/dist/pocketbase.es.mjs\n");

/***/ })

};
;